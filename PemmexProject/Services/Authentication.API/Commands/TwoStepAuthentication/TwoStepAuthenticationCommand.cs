
using Authentication.API.Configuration;
using Authentication.API.Database.context;
using Authentication.API.Database.Repositories.Interface;
using AutoMapper;
using IdentityModel.Client;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using PemmexCommonLibs.Application.Helpers;
using PemmexCommonLibs.Application.Interfaces;
using PemmexCommonLibs.Domain.Common.Dtos;
using PemmexCommonLibs.Domain.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Authentication.API.Commands.TwoStepAuthentication
{
    public class TwoStepAuthenticationCommand : IRequest<ResponseMessage>
    {
        public string userName { get; set; }
        public string password { get; set; }
    }
    public class TwoStepAuthenticationCommandHandeler : IRequestHandler<TwoStepAuthenticationCommand, ResponseMessage>
    {
        private readonly IMapper _mapper;
        private readonly IConfiguration _configuration;
        private readonly IDateTime _dateTime;
        private readonly IUserManager _userManager;
        private readonly IUser _user;
        public TwoStepAuthenticationCommandHandeler(IUser user, IMapper mapper,
            IConfiguration configuration,IDateTime dateTime,IUserManager userManager)
        {
            _mapper = mapper;
            _configuration = configuration;
            _dateTime = dateTime;
            _userManager = userManager;
            _user = user;

        }
        public async Task<ResponseMessage> Handle(TwoStepAuthenticationCommand request, CancellationToken cancellationToken)
        {
            try
            {
                var user = await _userManager.VerifyAndGetUserAsync(request.userName,request.password);
                if (user != null)
                {
                    if (user.IsTwoStepAuthEnabled)
                    {
                        string code = GetAutoGeneratedCode();
                        EmailRequest req = new EmailRequest();
                        req.ToEmail = user.Email;
                        req.Subject = "Two step Authentication";
                        req.Body = EmailMessage(user.FirstName, user.LastName, code);
                        string json = JsonConvert.SerializeObject(req);
                        using (var httpClient = new HttpClient())
                        {
                            HttpRequestMessage requestMessage = new HttpRequestMessage(
                            HttpMethod.Post,
                             _configuration["GlobalBaseUrl"] + "/Email/Send");

                            requestMessage.Content = new StringContent(json, Encoding.UTF8, "application/json");

                            var result = await httpClient.SendAsync(requestMessage);
                            user.PasswordResetCode = code;
                            user.PasswordResetCodeTime = _dateTime.Now;
                            //_context.Users.Update(user);
                            //await _context.SaveChangesAsync(cancellationToken);
                            var saveUser = await _user.UpdateUser(user);
                            return new ResponseMessage(true, EResponse.OK, "Email Sent Successfully", user.Email);
                        }
                    }
                    var client = new HttpClient();
                    var identityServerResponse = await client.RequestPasswordTokenAsync(new PasswordTokenRequest
                    {
                        Address = $"{_configuration.GetValue<string>("Configurations:applicationUrl")}/connect/token",
                        GrantType = _configuration.GetValue<string>("Configurations:GrantType"),

                        ClientId = _configuration.GetValue<string>("Configurations:ClientId"),
                        ClientSecret = _configuration.GetValue<string>("Configurations:ClientSecret"),
                        Scope = _configuration.GetValue<string>("Configurations:Scope"),

                        UserName = request.userName,
                        Password = request.password
                    });
                    var claims = ClaimsProvider.GetUserFromClaims(identityServerResponse.AccessToken,
                        identityServerResponse.ExpiresIn, identityServerResponse.TokenType
                        , identityServerResponse.Scope);
                    return new ResponseMessage(false, EResponse.NoData, "User Data", claims);
                }
                return new ResponseMessage(false, EResponse.NoData, "No User Found or credentials did not match", request.userName);
            }
            catch (Exception)
            {
                throw;
            }
        }
        private string EmailMessage(string firstName, string LastName, string code)
        {
            return $"<h1>Verify your User Identity</h1></br><h3>Hi {firstName} {LastName},</h3></br>" +
                     "<p>You have enabled two step authentication using email for your Pemmex ID.<br><br>" +
                     $"<h3><b>{code}</b></h3> is your code. Please put it to your Pemmex login. " +
                     "Never share this code with anyone." +
                     
                     "</br></br></br></br>Have fun with Pemmex" +
                     "</br>Your Pemmex ID team" +
                     "</br></br></br><br>This is an automatic generated message, please do not respond to this e-mail address. Contact Service Desk <Ph and email from settings> in case of questions. " +
                     "</br>© Copyright Pemmex Oy, Finland.All rights reserved. ";
        }
        private string GetAutoGeneratedCode()
        {
            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            var stringChars = new char[8];
            var random = new Random();

            for (int i = 0; i < stringChars.Length; i++)
            {
                stringChars[i] = chars[random.Next(chars.Length)];
            }

            return new String(stringChars);
        }
    }
}
