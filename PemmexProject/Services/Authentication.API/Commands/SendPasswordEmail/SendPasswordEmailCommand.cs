using Authentication.API.Configuration;
using Authentication.API.Database.context;
using Authentication.API.Database.Repositories.Interface;
using AutoMapper;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using PemmexCommonLibs.Application.Helpers;
using PemmexCommonLibs.Application.Interfaces;
using PemmexCommonLibs.Domain.Common.Dtos;
using PemmexCommonLibs.Domain.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Authentication.API.Commands.SendPasswordEmail
{
    public class SendPasswordEmailCommand : IRequest<ResponseMessage>
    {
        public string email { get; set; }
    }

    public class SendPasswordEmailCommandHandeler : IRequestHandler<SendPasswordEmailCommand, ResponseMessage>
    {
        private readonly IMapper _mapper;
        private readonly IConfiguration _configuration;
        private readonly IDateTime _dateTime;
        private readonly IUserManager _userManager;
        private readonly IUser _user;
        public SendPasswordEmailCommandHandeler(IUser user, IMapper mapper, 
            IConfiguration configuration,IDateTime dateTime,IUserManager userManager)
        {
            _user = user;
            _mapper = mapper;
            _configuration = configuration;
            _dateTime = dateTime;
            _userManager = userManager;
        }
        public async Task<ResponseMessage> Handle(SendPasswordEmailCommand request, CancellationToken cancellationToken)
        {
            var user = await _userManager.FindByUserNameAsync(request.email);
            if (user != null)
            {
                string code = GetAutoGeneratedCode();
                EmailRequest req = new EmailRequest();
                req.ToEmail = request.email;
                req.Subject = "New Pemmex ID Password";
                req.Body = EmailMessage(user.FirstName, user.LastName,code);
                string json = JsonConvert.SerializeObject(req);
                using (var httpClient = new HttpClient())
                {
                    HttpRequestMessage requestMessage = new HttpRequestMessage(
                    HttpMethod.Post,
                     _configuration["GlobalBaseUrl"] + "/Email/Send");

                    requestMessage.Content = new StringContent(json, Encoding.UTF8, "application/json");

                    var result = await httpClient.SendAsync(requestMessage);
                    user.PasswordResetCode = code;
                    user.PasswordResetCodeTime = _dateTime.Now;
                    //_context.Users.Update(user);
                    //await _context.SaveChangesAsync(cancellationToken);
                    var UpdateUser = _user.UpdateUser(user);
                    return new ResponseMessage(true, EResponse.OK, "Email Sent Successfully", request.email);
                }

            }
            return new ResponseMessage(false, EResponse.NoData,"No User Found",request.email);
        }
        private string EmailMessage(string firstName, string LastName,string code)
        {
            return $"<h1>Create a New Password</h2></br><h3>Hi {firstName} {LastName},</h3></br>"+
                     "<p>Please select a new Password by clicking on the link below.</br>"+
                     "</br>"+
                     _configuration["FrontEndBaseUrl"] + $"/ForgotPassword?code={code}</br></br>" +
                     $"<h3>Email Code : <b>{code}</b></h3></br>"+
                     "In case you don’t want to reset your password, please ignore this email." +
                     "</br></br></br></br>Have fun with Pemmex" +
                     "</br>Your Pemmex ID team"+
                     "</br></br></br><br>This is an automatic generated message, please do not respond to this e-mail address. Contact Service Desk <Ph and email from settings> in case of questions. "+
                     "</br>© Copyright Pemmex Oy, Finland.All rights reserved. ";
        }
        private string GetAutoGeneratedCode()
        {
            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            var stringChars = new char[8];
            var random = new Random();

            for (int i = 0; i < stringChars.Length; i++)
            {
                stringChars[i] = chars[random.Next(chars.Length)];
            }

            return new String(stringChars);
        }
    }
}
