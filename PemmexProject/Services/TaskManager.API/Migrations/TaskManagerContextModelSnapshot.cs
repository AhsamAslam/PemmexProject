// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.API.Database.context;

namespace TaskManager.API.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    partial class TaskManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManager.API.Database.Entities.BaseTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedByIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("appliedStatus")
                        .HasColumnType("int");

                    b.Property<string>("businessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("costcenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("currentTaskStatus")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("reasons")
                        .HasColumnType("int");

                    b.Property<string>("taskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("taskType")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.ToTable("BaseTasks");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.BonusSettings", b =>
                {
                    b.Property<int>("BonusSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("businessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("limit_percentage")
                        .HasColumnType("float");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BonusSettingsId");

                    b.ToTable("BonusSettings");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.BonusTask", b =>
                {
                    b.Property<int>("BonusTaskId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("businessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("costcenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("one_time_bonus")
                        .HasColumnType("float");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("salary")
                        .HasColumnType("float");

                    b.HasKey("BonusTaskId");

                    b.ToTable("BonusTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeBudgetPromotion", b =>
                {
                    b.Property<int>("BudgetTaskId")
                        .HasColumnType("int");

                    b.HasKey("BudgetTaskId");

                    b.ToTable("BudgetPromotions");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeBudgetPromotionDetail", b =>
                {
                    b.Property<int>("ChangeBudgetPromotionDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdditionalAgreedPart")
                        .HasColumnType("float");

                    b.Property<double>("BaseSalary")
                        .HasColumnType("float");

                    b.Property<int>("BudgetTaskId")
                        .HasColumnType("int");

                    b.Property<string>("CostCenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Emp_Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("IncreaseInCurrency")
                        .HasColumnType("float");

                    b.Property<double>("IncreaseInPercentage")
                        .HasColumnType("float");

                    b.Property<string>("JobFunction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NewBaseSalary")
                        .HasColumnType("float");

                    b.Property<string>("NewGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NewTotalSalary")
                        .HasColumnType("float");

                    b.Property<string>("OrganizationCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCurrentSalary")
                        .HasColumnType("float");

                    b.Property<string>("businessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("mandatoryPercentage")
                        .HasColumnType("float");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChangeBudgetPromotionDetailId");

                    b.HasIndex("BudgetTaskId");

                    b.ToTable("BudgetPromotionDetails");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeCompensation", b =>
                {
                    b.Property<int>("CompensationTaskId")
                        .HasColumnType("int");

                    b.Property<double>("AdditionalAgreedPart")
                        .HasColumnType("float");

                    b.Property<double>("AppliedSalary")
                        .HasColumnType("float");

                    b.Property<double>("BaseSalary")
                        .HasColumnType("float");

                    b.Property<double>("CarBenefit")
                        .HasColumnType("float");

                    b.Property<double>("EmissionBenefit")
                        .HasColumnType("float");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HomeInternetBenefit")
                        .HasColumnType("float");

                    b.Property<double>("InsuranceBenefit")
                        .HasColumnType("float");

                    b.Property<double>("NewAdditionalAgreedPart")
                        .HasColumnType("float");

                    b.Property<double>("NewTotalMonthlyPay")
                        .HasColumnType("float");

                    b.Property<double>("PhoneBenefit")
                        .HasColumnType("float");

                    b.Property<double>("TotalMonthlyPay")
                        .HasColumnType("float");

                    b.Property<string>("businessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("costcenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompensationTaskId");

                    b.ToTable("ChangeCompensations");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeEmployeeHardTargets", b =>
                {
                    b.Property<int>("ChangeEmployeeHardTargetsTaskId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractualOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Emp_Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EmployeeDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EvaluationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HardTargetsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HardTargetsId")
                        .HasColumnType("int");

                    b.Property<string>("HardTargetsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobFunction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeasurementCriteria")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformanceCriteria")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weightage")
                        .HasColumnType("float");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ChangeEmployeeHardTargetsTaskId");

                    b.ToTable("ChangeEmployeeHardTargets");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeEmployeeSoftTargets", b =>
                {
                    b.Property<int>("ChangeEmployeeTargetsTaskId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractualOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Emp_Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EmployeeDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EvaluationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobFunction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformanceCriteria")
                        .HasColumnType("int");

                    b.Property<string>("SoftTargetsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoftTargetsId")
                        .HasColumnType("int");

                    b.Property<string>("SoftTargetsMultiplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SoftTargetsName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ChangeEmployeeTargetsTaskId");

                    b.ToTable("ChangeEmployeeSoftTargets");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeGrade", b =>
                {
                    b.Property<int>("GradeTaskId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("businessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("costcenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradeTaskId");

                    b.ToTable("ChangeGrades");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeHoliday", b =>
                {
                    b.Property<int>("HolidayTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HolidayEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HolidayStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubsituteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubsituteIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubsituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("businessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("costcenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("holidayType")
                        .HasColumnType("int");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HolidayTaskId");

                    b.ToTable("ChangeHolidays");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeManager", b =>
                {
                    b.Property<int>("ManagerTaskId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newCostCenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newCostCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newManagerIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newbusinessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newbusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldCostCenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldCostCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldManagerIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldbusinessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagerTaskId");

                    b.ToTable("ChangeManagers");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeTeam", b =>
                {
                    b.Property<int>("TeamTaskId")
                        .HasColumnType("int");

                    b.Property<string>("managerIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("managerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newCostCenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newCostCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("newbusinessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldCostCenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldCostCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldbusinessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamTaskId");

                    b.ToTable("ChangeTeam");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeTitle", b =>
                {
                    b.Property<int>("TitleTaskId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("businessIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("costcenterIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oldTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("organizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TitleTaskId");

                    b.ToTable("ChangeTitles");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.Notifications", b =>
                {
                    b.Property<int>("notificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<int>("tasks")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("notificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.OrganizationApprovalSettingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ManagerType")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationApprovalSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("rankNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationApprovalSettingsId");

                    b.ToTable("organizationApprovalSettingDetails");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.OrganizationApprovalSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("taskType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("organizationApprovalSettings");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.BonusTask", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithOne("ChangeBonus")
                        .HasForeignKey("TaskManager.API.Database.Entities.BonusTask", "BonusTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeBudgetPromotion", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithOne("ChangeBudgetPromotion")
                        .HasForeignKey("TaskManager.API.Database.Entities.ChangeBudgetPromotion", "BudgetTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeBudgetPromotionDetail", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.ChangeBudgetPromotion", "ChangeBudgetPromotion")
                        .WithMany("changeBudgetPromotionDetails")
                        .HasForeignKey("BudgetTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangeBudgetPromotion");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeCompensation", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithOne("ChangeCompensation")
                        .HasForeignKey("TaskManager.API.Database.Entities.ChangeCompensation", "CompensationTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeEmployeeHardTargets", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithMany()
                        .HasForeignKey("ChangeEmployeeHardTargetsTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeEmployeeSoftTargets", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithMany()
                        .HasForeignKey("ChangeEmployeeTargetsTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeGrade", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithOne("ChangeGrade")
                        .HasForeignKey("TaskManager.API.Database.Entities.ChangeGrade", "GradeTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeHoliday", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithOne("ChangeHoliday")
                        .HasForeignKey("TaskManager.API.Database.Entities.ChangeHoliday", "HolidayTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeManager", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithOne("ChangeManager")
                        .HasForeignKey("TaskManager.API.Database.Entities.ChangeManager", "ManagerTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeTeam", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithOne("ChangeTeam")
                        .HasForeignKey("TaskManager.API.Database.Entities.ChangeTeam", "TeamTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeTitle", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.BaseTask", "BaseTask")
                        .WithOne("ChangeTitle")
                        .HasForeignKey("TaskManager.API.Database.Entities.ChangeTitle", "TitleTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseTask");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.OrganizationApprovalSettingDetail", b =>
                {
                    b.HasOne("TaskManager.API.Database.Entities.OrganizationApprovalSettings", null)
                        .WithMany("organizationApprovalSettingDetails")
                        .HasForeignKey("OrganizationApprovalSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.BaseTask", b =>
                {
                    b.Navigation("ChangeBonus");

                    b.Navigation("ChangeBudgetPromotion");

                    b.Navigation("ChangeCompensation");

                    b.Navigation("ChangeGrade");

                    b.Navigation("ChangeHoliday");

                    b.Navigation("ChangeManager");

                    b.Navigation("ChangeTeam");

                    b.Navigation("ChangeTitle");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.ChangeBudgetPromotion", b =>
                {
                    b.Navigation("changeBudgetPromotionDetails");
                });

            modelBuilder.Entity("TaskManager.API.Database.Entities.OrganizationApprovalSettings", b =>
                {
                    b.Navigation("organizationApprovalSettingDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
